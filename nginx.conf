daemon off;
worker_processes 1;
error_log stderr info;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

env DNS_SERVER;
env UP_HOSTNAME;

http {
    # global dns cache
    lua_shared_dict dns_cache_http 1m;

    # create a global master which caches DNS answers according to TTL
    init_by_lua_block {
        local dns_cache_key = "dns_cache_http"
        local dns_server = os.getenv("DNS_SERVER")
        local hostname = os.getenv("UP_HOSTNAME")
        local ttl = 10

        lb = require("load_balancer.helper"):new(dns_cache_key, hostname, dns_server, ttl)
    }

    # create a per-worker client that periodically syncs from the master cache (according to TTL values)
    init_worker_by_lua_block {
        lb:init_worker()
    }

    server {
        listen 8080;
        access_log off;

        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }
    }

    upstream myup_cookie {
        server 127.0.0.1:80 down; # dummy

        # cookie-based
        balancer_by_lua_block { 
            return lb:lb_cookie(8080)
        }
    }

    server {
        listen 80;

        location / {
            proxy_pass http://myup_cookie;
        }
    }
}

stream {
    # global dns cache
    lua_shared_dict dns_cache 1m;

    # create a global master which caches DNS answers according to TTL
    init_by_lua_block {
        local dns_cache_key = "dns_cache"
        local dns_server = os.getenv("DNS_SERVER")
        local hostname = os.getenv("UP_HOSTNAME")
        local ttl = 10

        lb = require("load_balancer.helper"):new(dns_cache_key, hostname, dns_server, ttl)
    }

    # create a per-worker client that periodically syncs from the master cache (according to TTL values)
    init_worker_by_lua_block {
        lb:init_worker()
    }

    upstream myup_rr {
        server 127.0.0.1:80 down; # dummy

        # round robin
        balancer_by_lua_block { 
            return lb:lb_rr(8080)
        }
    }

    upstream myup_hash {
        server 127.0.0.1:80 down; # dummy

        # ip hash
        balancer_by_lua_block { 
            return lb:lb_hash(8080, ngx.var.remote_addr)
        }
    }

    server {
        listen     81;
        proxy_pass myup_rr;
    }

    server {
        listen     82;
        proxy_pass myup_hash;
    }
}